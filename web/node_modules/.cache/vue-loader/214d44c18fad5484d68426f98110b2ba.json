{"remainingRequest":"/Users/raviailani/Downloads/django-vue-admin/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/raviailani/Downloads/django-vue-admin/web/node_modules/d2p-extends/src/file-uploader/lib/cropper-uploader.vue?vue&type=style&index=0&id=ba484b8a&lang=scss&","dependencies":[{"path":"/Users/raviailani/Downloads/django-vue-admin/web/node_modules/d2p-extends/src/file-uploader/lib/cropper-uploader.vue","mtime":1674694550311},{"path":"/Users/raviailani/Downloads/django-vue-admin/web/node_modules/css-loader/dist/cjs.js","mtime":1674694549148},{"path":"/Users/raviailani/Downloads/django-vue-admin/web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1674694549593},{"path":"/Users/raviailani/Downloads/django-vue-admin/web/node_modules/postcss-loader/src/index.js","mtime":1674694549280},{"path":"/Users/raviailani/Downloads/django-vue-admin/web/node_modules/sass-loader/dist/cjs.js","mtime":1674694548949},{"path":"/Users/raviailani/Downloads/django-vue-admin/web/node_modules/cache-loader/dist/cjs.js","mtime":1674694548948},{"path":"/Users/raviailani/Downloads/django-vue-admin/web/node_modules/vue-loader/lib/index.js","mtime":1674694549360}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5kMnAtY3JvcHBlci11cGxvYWRlcnsKICAuZWwtaW1hZ2Utdmlld2VyX19jbG9zZXtjb2xvcjojZmZmfQogICYuaXMtZGlzYWJsZWQgewogICAgLmltYWdlLWxpc3R7CiAgICAgIC5pbWFnZS1pdGVtewogICAgICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7CiAgICAgIH0KICAgIH0KICAgIGl7Y3Vyc29yOiBub3QtYWxsb3dlZH0KICB9CiAgLmltYWdlLWxpc3R7CiAgICBkaXNwbGF5OiBmbGV4OwogICAganVzdGlmeS1jb250ZW50OiBsZWZ0OwogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgIGZsZXgtd3JhcDogd3JhcDsKICAgIC5pbWFnZS1pdGVtewogICAgICB3aWR0aDogMTAwcHg7CiAgICAgIGhlaWdodDogMTAwcHg7CiAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmJmZGZmOwogICAgICBib3JkZXI6IDFweCBzb2xpZCAjYzBjY2RhOwogICAgICBib3JkZXItcmFkaXVzOiA2cHg7CiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgbWFyZ2luLXJpZ2h0OiA4cHg7CiAgICAgIG1hcmdpbi1ib3R0b206IDhweDsKICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgICAmLmltYWdlLXBsdXN7CiAgICAgICAgYm9yZGVyOiAxcHggZGFzaGVkICNjMGNjZGE7CiAgICAgIH0KICAgICAgLmNyb3BwZXItdXBsb2FkZXItaWNvbiB7CiAgICAgICAgdmVydGljYWwtYWxpZ246IHRvcDsKICAgICAgICBmb250LXNpemU6IDI4cHg7CiAgICAgICAgY29sb3I6ICM4YzkzOWQ7CiAgICAgIH0KICAgICAgLmltYWdlewogICAgICAgIHdpZHRoOiAxMDBweDsKICAgICAgICBoZWlnaHQ6IDEwMHB4OwogICAgICB9CgogICAgICAuZGVsZXRlewogICAgICAgIGJvcmRlci1yYWRpdXM6IDZweDsKICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgIGxlZnQ6IDA7CiAgICAgICAgdG9wOiAwOwogICAgICAgIGN1cnNvcjogZGVmYXVsdDsKICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgY29sb3I6ICNmZmY7CiAgICAgICAgb3BhY2l0eTogMDsKICAgICAgICBmb250LXNpemU6IDIwcHg7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLDAsMCwuOSk7CiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IC4zczsKICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IC4zczsKICAgICAgICAmOmhvdmVyewogICAgICAgICAgb3BhY2l0eTogMC45OwogICAgICAgIH0KICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgaXsKICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICB9CiAgICAgIH0KICAgICAgLnN0YXR1cy11cGxvYWRpbmd7CiAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4OwogICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgbGVmdDogMDsKICAgICAgICB0b3A6IDA7CiAgICAgICAgY3Vyc29yOiBkZWZhdWx0OwogICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICBjb2xvcjogI2ZmZjsKICAgICAgICBvcGFjaXR5OiAxOwogICAgICAgIGZvbnQtc2l6ZTogMjBweDsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7CiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IC4zczsKICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IC4zczsKICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgLmVsLXByb2dyZXNzewogICAgICAgICAgd2lkdGg6IDcwcHg7CiAgICAgICAgICBoZWlnaHQ6IDcwcHg7CiAgICAgICAgICAuZWwtcHJvZ3Jlc3NfX3RleHQgewogICAgICAgICAgICBjb2xvcjojZmZmOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgIH0KICAgICAgLnN0YXR1cy1kb25lewogICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICByaWdodDogLTE1cHg7CiAgICAgICAgdG9wOiAtNnB4OwogICAgICAgIHdpZHRoOiA0MHB4OwogICAgICAgIGhlaWdodDogMjRweDsKICAgICAgICBiYWNrZ3JvdW5kOiAjMTNjZTY2OwogICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTsKICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7CiAgICAgICAgLXdlYmtpdC1ib3gtc2hhZG93OiAwIDAgMXBjIDFweCByZ2JhKDAsMCwwLC4yKTsKICAgICAgICBib3gtc2hhZG93OiAwIDAgMXBjIDFweCByZ2JhKDAsMCwwLC4yKTsKICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgaXsKICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDsKICAgICAgICAgIG1hcmdpbi10b3A6IDExcHg7CiAgICAgICAgICBjb2xvcjogI2ZmZjsKICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTsKICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Cgo="},{"version":3,"sources":["cropper-uploader.vue"],"names":[],"mappings":";AA0XA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"cropper-uploader.vue","sourceRoot":"node_modules/d2p-extends/src/file-uploader/lib","sourcesContent":["<template>\r\n  <div class=\"d2p-cropper-uploader\"  :class=\"{'is-disabled':disabled}\" >\r\n    <div class=\"image-list\">\r\n      <div class=\"image-item\" v-for=\"(item,index) in list\" :key=\"index\">\r\n        <el-image class=\"image\"\r\n          :src=\"item.dataUrl?item.dataUrl:item.url\"\r\n          :data-src=\"item.url\"\r\n          :preview-src-list=\"_urlList\"\r\n          fit=\"contain\" >\r\n          <div slot=\"placeholder\" class=\"image-slot\">\r\n            <img src=\"./loading-spin.svg\">\r\n          </div>\r\n        </el-image>\r\n        <div class=\"delete\" v-if=\"!disabled\"><i class=\"el-icon-delete\" @click=\"removeImage(index,item)\"></i></div>\r\n        <div class=\"status-uploading\" v-if=\"item.status==='uploading'\">\r\n          <el-progress type=\"circle\" :percentage=\"item.progress\" :width=\"70\"/>\r\n        </div>\r\n        <div class=\"status-done\" v-else-if=\"item.status==='done'\">\r\n          <i class=\"el-icon-upload-success el-icon-check\"></i>\r\n        </div>\r\n      </div>\r\n      <div v-if=\"limit <=0 || limit>list.length\" class=\"image-item image-plus\" @click=\"addNewImage\">\r\n        <i class=\"el-icon-plus cropper-uploader-icon\"></i>\r\n      </div>\r\n    </div>\r\n    <d2p-cropper ref=\"cropper\"\r\n                        :title=\"title\"\r\n                        :cropperHeight=\"cropperHeight\"\r\n                        :dialogWidth=\"dialogWidth\"\r\n                        :accept=\"accept\"\r\n                        :uploadTip=\"uploadTip\"\r\n                        :maxSize=\"maxSize\"\r\n                        :cropper=\"cropper\"\r\n                        output=\"all\"\r\n                        @done=\"cropComplete\"\r\n    ></d2p-cropper>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport D2pCropper from './cropper'\r\nimport D2pUploader from '../../uploader'\r\nimport { d2CrudPlus } from '../../utils/d2-crud-plus'\r\nimport log from '../../utils/util.log'\r\n/**\r\n * 图片裁剪上传组件,封装了d2p-cropper, d2p-cropper内部封装了cropperjs\r\n */\r\n\r\nexport default {\r\n  name: 'd2p-cropper-uploader',\r\n  mixins: [d2CrudPlus.inputBase],\r\n  components: {\r\n    D2pCropper\r\n  },\r\n  props: {\r\n    // 初始图片url\r\n    value: {\r\n      type: [String, Array]\r\n    },\r\n    // 上传后端类型，[form, cos, qiniu , alioss]\r\n    type: {\r\n      type: String\r\n    },\r\n    // 上传提示\r\n    uploadTip: {\r\n      type: String\r\n    },\r\n    // 对话框标题\r\n    title: String,\r\n    // cropper的高度，默认为浏览器可视窗口高度的40%，最小270\r\n    cropperHeight: {\r\n      type: [String, Number]\r\n    },\r\n    // 对话框宽度，默认50%\r\n    dialogWidth: {\r\n      type: [String, Number],\r\n      default: '50%'\r\n    },\r\n    // 图片大小限制，单位MB\r\n    maxSize: {\r\n      type: Number,\r\n      default: 5\r\n    },\r\n    // 图片数量限制,0为不限制\r\n    limit: {\r\n      type: Number,\r\n      default: 1\r\n    },\r\n    // 可接收的文件后缀\r\n    accept: {\r\n      type: String,\r\n      default: '.jpg, .jpeg, .png, .gif, .webp'\r\n    },\r\n    // [cropperjs的参数](https://github.com/fengyuanchen/cropperjs)\r\n    cropper: {\r\n      type: Object\r\n    },\r\n    // 上传参数，会临时覆盖全局上传配置参数[d2p-uploader](/guide/extends/uploader.html)\r\n    uploader: {\r\n      type: Object\r\n    },\r\n    // 构建下载url方法,不影响提交的value\r\n    buildUrl: {\r\n      type: Function,\r\n      default: function (value, item) { return (typeof value === 'object') ? item.url : value }\r\n    }\r\n\r\n  },\r\n  data () {\r\n    return {\r\n      index: undefined,\r\n      list: []\r\n    }\r\n  },\r\n  watch: {\r\n    value (val) {\r\n      this.$emit('change', val)\r\n      if (val === this.emitValue) {\r\n        return\r\n      }\r\n      this.initValue(val)\r\n    }\r\n  },\r\n  created () {\r\n    this.emitValue = this.value\r\n    this.initValue(this.value)\r\n  },\r\n  computed: {\r\n    _urlList () {\r\n      const urlList = []\r\n      if (this.list) {\r\n        for (const item of this.list) {\r\n          urlList.push(item.url)\r\n        }\r\n      }\r\n      return urlList\r\n    }\r\n  },\r\n  methods: {\r\n    initValue (value) {\r\n      const list = []\r\n      if (value == null || value === '') {\r\n        this.$set(this, 'list', list)\r\n        return\r\n      }\r\n      if (typeof (value) === 'string') {\r\n        list.push({ url: this.buildUrl(value), value: value, status: 'done' })\r\n      } else {\r\n        for (const item of value) {\r\n          list.push({ url: this.buildUrl(item), value: item, status: 'done' })\r\n        }\r\n      }\r\n      this.$set(this, 'list', list)\r\n    },\r\n    addNewImage () {\r\n      if (this.disabled) {\r\n        return\r\n      }\r\n      this.index = undefined\r\n      this.$refs.cropper.clear()\r\n      this.$refs.cropper.open()\r\n    },\r\n    removeImage (index, item) {\r\n      this.list.splice(index, 1)\r\n      this.emit()\r\n    },\r\n    isHasUploadingItem () {\r\n      const fileList = this.list\r\n      if (fileList && fileList.length > 0) {\r\n        for (const item of fileList) {\r\n          if (item.status === 'uploading') {\r\n            return true\r\n          }\r\n        }\r\n      }\r\n      return false\r\n    },\r\n    async cropComplete (ret) {\r\n      const blob = ret.blob\r\n      const dataUrl = ret.dataUrl\r\n      const file = ret.file\r\n      // 开始上传\r\n      const item = {\r\n        url: undefined,\r\n        dataUrl: dataUrl,\r\n        status: 'uploading',\r\n        progress: 0\r\n      }\r\n      const onProgress = (e) => {\r\n        item.progress = e.percent\r\n      }\r\n      const onError = (e) => {\r\n        item.status = 'error'\r\n        item.message = '文件上传出错:' + e.message\r\n        log.debug(e)\r\n      }\r\n      log.debug('blob:', blob)\r\n      const option = {\r\n        file: blob,\r\n        fileName: file.name,\r\n        onProgress,\r\n        onError\r\n      }\r\n      this.list.push(item)\r\n      const upload = await this.doUpload(option)\r\n      item.url = this.buildUrl(upload.url)\r\n      item.value = upload.url\r\n      item.status = 'done'\r\n      this.emit()\r\n    },\r\n    doUpload (option) {\r\n      option.config = this.uploader\r\n      return this.getUploader().then(uploader => {\r\n        return uploader.upload(option).then(ret => {\r\n          if (this.suffix != null) {\r\n            ret.url += this.suffix\r\n          }\r\n          return ret\r\n        })\r\n      })\r\n    },\r\n    getUploader () {\r\n      let type = this.type\r\n      if (this.uploader != null && this.uploader.type != null) {\r\n        type = this.uploader.type\r\n      }\r\n      return D2pUploader.getUploader(type)\r\n    },\r\n    emit () {\r\n      const list = []\r\n      for (const item of this.list) {\r\n        if (item.status != null && item.status !== 'done') {\r\n          // 全部上传完再发通知\r\n          return\r\n        }\r\n        if (typeof (item) === 'string') {\r\n          list.push(item)\r\n        } else {\r\n          list.push(item.value)\r\n        }\r\n      }\r\n      let ret = list\r\n      if (this.limit === 1) {\r\n        ret = ((list && list.length > 0) ? list[0] : undefined)\r\n      }\r\n      this.emitValue = ret\r\n      this.$emit('input', ret)\r\n    }\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" >\r\n  .d2p-cropper-uploader{\r\n    .el-image-viewer__close{color:#fff}\r\n    &.is-disabled {\r\n      .image-list{\r\n        .image-item{\r\n          cursor: not-allowed;\r\n        }\r\n      }\r\n      i{cursor: not-allowed}\r\n    }\r\n    .image-list{\r\n      display: flex;\r\n      justify-content: left;\r\n      align-items: center;\r\n      flex-wrap: wrap;\r\n      .image-item{\r\n        width: 100px;\r\n        height: 100px;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        background-color: #fbfdff;\r\n        border: 1px solid #c0ccda;\r\n        border-radius: 6px;\r\n        position: relative;\r\n        margin-right: 8px;\r\n        margin-bottom: 8px;\r\n        cursor: pointer;\r\n        overflow: hidden;\r\n        &.image-plus{\r\n          border: 1px dashed #c0ccda;\r\n        }\r\n        .cropper-uploader-icon {\r\n          vertical-align: top;\r\n          font-size: 28px;\r\n          color: #8c939d;\r\n        }\r\n        .image{\r\n          width: 100px;\r\n          height: 100px;\r\n        }\r\n\r\n        .delete{\r\n          border-radius: 6px;\r\n          position: absolute;\r\n          width: 100%;\r\n          height: 100%;\r\n          left: 0;\r\n          top: 0;\r\n          cursor: default;\r\n          text-align: center;\r\n          color: #fff;\r\n          opacity: 0;\r\n          font-size: 20px;\r\n          background-color: rgba(0,0,0,.9);\r\n          -webkit-transition: opacity .3s;\r\n          transition: opacity .3s;\r\n          &:hover{\r\n            opacity: 0.9;\r\n          }\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n          i{\r\n            cursor: pointer;\r\n          }\r\n        }\r\n        .status-uploading{\r\n          border-radius: 6px;\r\n          position: absolute;\r\n          width: 100%;\r\n          height: 100%;\r\n          left: 0;\r\n          top: 0;\r\n          cursor: default;\r\n          text-align: center;\r\n          color: #fff;\r\n          opacity: 1;\r\n          font-size: 20px;\r\n          background-color: rgba(0, 0, 0, 0.5);\r\n          -webkit-transition: opacity .3s;\r\n          transition: opacity .3s;\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n          .el-progress{\r\n            width: 70px;\r\n            height: 70px;\r\n            .el-progress__text {\r\n              color:#fff;\r\n            }\r\n          }\r\n\r\n        }\r\n        .status-done{\r\n          position: absolute;\r\n          right: -15px;\r\n          top: -6px;\r\n          width: 40px;\r\n          height: 24px;\r\n          background: #13ce66;\r\n          text-align: center;\r\n          -webkit-transform: rotate(45deg);\r\n          transform: rotate(45deg);\r\n          -webkit-box-shadow: 0 0 1pc 1px rgba(0,0,0,.2);\r\n          box-shadow: 0 0 1pc 1px rgba(0,0,0,.2);\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n          i{\r\n            font-size: 12px;\r\n            margin-top: 11px;\r\n            color: #fff;\r\n            -webkit-transform: rotate(-45deg);\r\n            transform: rotate(-45deg);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n</style>\r\n"]}]}