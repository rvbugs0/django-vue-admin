{"remainingRequest":"/Users/raviailani/Downloads/django-vue-admin/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/raviailani/Downloads/django-vue-admin/web/node_modules/d2p-extends/src/file-uploader/lib/file-uploader.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/raviailani/Downloads/django-vue-admin/web/node_modules/d2p-extends/src/file-uploader/lib/file-uploader.vue","mtime":1674694550313},{"path":"/Users/raviailani/Downloads/django-vue-admin/web/node_modules/cache-loader/dist/cjs.js","mtime":1674694548948},{"path":"/Users/raviailani/Downloads/django-vue-admin/web/node_modules/babel-loader/lib/index.js","mtime":1674694549283},{"path":"/Users/raviailani/Downloads/django-vue-admin/web/node_modules/cache-loader/dist/cjs.js","mtime":1674694548948},{"path":"/Users/raviailani/Downloads/django-vue-admin/web/node_modules/vue-loader/lib/index.js","mtime":1674694549360}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["file-uploader.vue"],"names":[],"mappings":";AAgfile":"file-uploader.vue","sourceRoot":"node_modules/d2p-extends/src/file-uploader/lib","sourcesContent":["<template>\r\n  <div class=\"d2p-file-uploader\" :class=\"{'is-disabled':disabled}\" >\r\n  <el-upload :class=\"uploadClass\"\r\n             :file-list=\"fileList\"\r\n             :disabled=\"disabled\"\r\n             :http-request=\"httpRequest\"\r\n             :on-exceed=\"onExceed\"\r\n             :on-remove=\"handleUploadFileRemove\"\r\n             :on-success=\"handleUploadFileSuccess\"\r\n             :on-error=\"handleUploadFileError\"\r\n             :on-progress=\"handleUploadProgress\"\r\n             @blur=\"handleBlur\"\r\n             ref=\"fileUploader\"\r\n             v-bind=\"_elProps\"\r\n  >\r\n    <el-button :disabled=\"disabled\" :size=\"btnSize\" type=\"primary\" v-if=\"_elProps.listType === 'text' || this._elProps.listType === 'picture'\">{{btnName}}</el-button>\r\n    <div class=\"avatar-item-wrapper\"  v-else-if=\"this._elProps.listType === 'picture-card'\">\r\n      <i class=\"el-icon-plus avatar-uploader-icon\" />\r\n    </div>\r\n    <template v-else-if=\"_elProps.listType ===  'avatar'\">\r\n      <div class=\"avatar-item-wrapper\">\r\n        <div class=\"status-uploading\" v-if=\"avatarLoading!=null\">\r\n          <el-progress type=\"circle\" :percentage=\"avatarLoading\" :width=\"70\"/>\r\n        </div>\r\n        <div v-if=\"avatarUrl!=null\" class=\"avatar\">\r\n          <el-image :src=\"avatarUrl\">\r\n            <div slot=\"placeholder\" class=\"image-slot\">\r\n              <img src=\"./loading-spin.svg\">\r\n            </div>\r\n          </el-image>\r\n          <div class=\"preview\" @click.stop=\"\" >\r\n            <i class=\"el-icon-zoom-in\" @click=\"previewAvatar\"></i>\r\n            <i class=\"el-icon-delete\" v-if=\"!disabled\" @click=\"removeAvatar\"></i>\r\n          </div>\r\n        </div>\r\n        <i class=\"el-icon-plus avatar-uploader-icon\" v-else/>\r\n      </div>\r\n    </template>\r\n  </el-upload>\r\n    <el-dialog :visible.sync=\"dialogVisible\"  v-bind=\"preview\" append-to-body >\r\n      <div style=\"text-align: center\">\r\n        <img  style=\"max-width: 100%;\" :src=\"dialogImageUrl\" alt=\"\">\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SparkMD5 from 'spark-md5'\r\nimport D2pUploader from '../../uploader'\r\nimport lodash from 'lodash'\r\nimport { d2CrudPlus } from '../../utils/d2-crud-plus'\r\nimport log from '../../utils/util.log'\r\n// 文件上传组件,依赖D2pUploader\r\nexport default {\r\n  name: 'd2p-file-uploader',\r\n  mixins: [d2CrudPlus.inputBase],\r\n  props: {\r\n    // 选择文件按钮的大小\r\n    btnSize: { default: 'small' },\r\n    // 选择文件按钮的名称\r\n    btnName: { default: '选择文件' },\r\n    // 可选哪些类型的文件\r\n    accept: {},\r\n    // 上传后端类型，[cos,qiniu,alioss,form]\r\n    type: {\r\n      type: String,\r\n      default: undefined // 上传类型：form cos qiniu  alioss\r\n    },\r\n    // 值：url<br/>\r\n    // 或 [url1,url2]<br/>\r\n    // 或 {url:'url',md5:'',size:number}<br/>\r\n    // 或 [{url:'url',md5:'',size:number}]<br/>\r\n    // <br/>\r\n    // limit=1 时 input事件返回 {url:'url',md5:'',size:number}<br/>\r\n    // limit>1 时 input事件返回 数组<br/>\r\n    value: {\r\n      type: [String, Array, Object]\r\n    },\r\n    // 样式后缀 追加到url的后面，进行图片处理，需要到对象存储平台配置样式\r\n    suffix: {\r\n      type: String,\r\n      required: false\r\n    },\r\n    // 返回类型: url=仅返回链接, object=包含md5和size , key=仅返回文件key\r\n    returnType: {\r\n      type: String,\r\n      default: 'url'\r\n    },\r\n    // 自定义参数\r\n    custom: {\r\n      type: Object\r\n    },\r\n    // 内部封装[el-upload](https://element.eleme.cn/#/zh-CN/component/upload)组件的属性参数<br/>\r\n    // 注意，form方式上传的action、name、headers等参数不在此设置\r\n    elProps: {\r\n      type: Object\r\n    },\r\n    // 预览对话框的配置\r\n    preview: {\r\n      type: Object\r\n    },\r\n    // 文件大小限制 <br/>\r\n    // 如果传入{limit,tip(fileSize,limit){vm.$message('可以自定义提示')}}\r\n    sizeLimit: {\r\n      type: Number, Object\r\n    },\r\n    // 构建下载url方法\r\n    buildUrl: {\r\n      type: Function,\r\n      default: function (value, item) { return (typeof value === 'object') ? item.url : value }\r\n    },\r\n    // 上传组件参数，会临时覆盖全局上传配置参数[d2p-uploader](/guide/extends/uploader.html)\r\n    uploader: {\r\n      type: Object,\r\n      default () { return {} }\r\n    },\r\n    // 与el-upload一致\r\n    beforeUpload: {\r\n      type: Function\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      fileList: [],\r\n      context: {},\r\n      dialogImageUrl: '',\r\n      dialogVisible: false,\r\n      avatarLoading: undefined\r\n    }\r\n  },\r\n  created () {\r\n    this.emitValue = this.value\r\n    this.initValue(this.value)\r\n  },\r\n  watch: {\r\n    value (value) {\r\n      if (this.dispatch) {\r\n        this.dispatch('ElFormItem', 'el.form.blur')\r\n      }\r\n      this.$emit('change', value)\r\n      if (this.emitValue === value) {\r\n        return\r\n      }\r\n      this.emitValue = value\r\n      this.initValue(value)\r\n    }\r\n  },\r\n  computed: {\r\n    _elProps () {\r\n      const defaultElProps = this.getDefaultElProps()\r\n      Object.assign(defaultElProps, this.elProps)\r\n      return defaultElProps\r\n    },\r\n    avatarUrl () {\r\n      if (this.fileList.length > 0) {\r\n        const file = this.fileList[0]\r\n        log.debug('file,', file, file.status)\r\n        if (file.response != null && file.response.url != null) {\r\n          return file.response.url\r\n        } else if (file.url != null) {\r\n          return file.url\r\n        }\r\n      }\r\n      return null\r\n    },\r\n    uploadClass () {\r\n      if (this._elProps.listType === 'avatar') {\r\n        return 'avatar-uploader'\r\n      } else if (this._elProps.listType === 'picture-card') {\r\n        if (this.fileList && this._elProps.limit !== 0 && this.fileList.length >= this._elProps.limit) {\r\n          return 'image-uploader hide-plus'\r\n        }\r\n        return 'image-uploader'\r\n      }\r\n      return 'file-uploader'\r\n    }\r\n  },\r\n  methods: {\r\n    handleBlur () {\r\n      console.log('blur')\r\n    },\r\n    getDefaultElProps () {\r\n      return {\r\n        limit: 0,\r\n        listType: 'text',\r\n        showFileList: true,\r\n        action: '',\r\n        onPreview: (file) => {\r\n          if (this._elProps.listType === 'picture-card' || this._elProps.listType === 'picture' || this._elProps.listType === 'avatar') {\r\n            this.dialogImageUrl = file.url\r\n            this.dialogVisible = true\r\n          } else {\r\n            window.open(file.url)\r\n          }\r\n        },\r\n        beforeUpload: async (file) => {\r\n          if (this.beforeUpload) {\r\n            const ret = await this.beforeUpload(file, { vm: this })\r\n            if (ret === false) {\r\n              return\r\n            }\r\n          }\r\n          if (this.sizeLimit == null) {\r\n            return true\r\n          }\r\n          let limit = this.sizeLimit\r\n          let showMessage = null\r\n          if (typeof limit === 'number') {\r\n            limit = this.sizeLimit\r\n            showMessage = (fileSize, limit) => {\r\n              if (this.$message) {\r\n                const limitTip = this.computeFileSize(limit)\r\n                const fileSizeTip = this.computeFileSize(file.size)\r\n                this.$message({ message: '文件大小不能超过' + limitTip + '，当前文件大小:' + fileSizeTip, type: 'warning' })\r\n              }\r\n            }\r\n          } else {\r\n            limit = this.sizeLimit.limit\r\n            showMessage = this.sizeLimit.tip\r\n          }\r\n          if (file.size > limit) {\r\n            log.debug('文件大小超过限制：', file.size)\r\n            showMessage(file.size, limit)\r\n            return false\r\n          }\r\n        }\r\n      }\r\n    },\r\n    setValue (value) {\r\n      this.initValue(value)\r\n      // this.$emit('change', this.fileList)\r\n    },\r\n    getUploader () {\r\n      let type = this.type\r\n      if (this.uploader != null && this.uploader.type != null) {\r\n        type = this.uploader.type\r\n      }\r\n      return D2pUploader.getUploader(type)\r\n    },\r\n    initValue (value) {\r\n      let fileList = []\r\n      if (value == null) {\r\n\r\n      } else if (typeof (value) === 'string') {\r\n        if (value !== '') {\r\n          const fileName = value.substring(value.lastIndexOf('/') + 1)\r\n          fileList = [{ value: value, name: fileName }]\r\n        }\r\n      } else if (value instanceof Array) {\r\n        if (value.length > 0 && typeof (value[0]) === 'string') {\r\n          const tmp = []\r\n          value.forEach(item => {\r\n            const fileName = item.substring(item.lastIndexOf('/') + 1)\r\n            tmp.push({ value: item, name: fileName })\r\n          })\r\n          fileList = tmp\r\n        } else {\r\n          fileList = value\r\n        }\r\n      } else if (value instanceof Object) {\r\n        fileList = [value]\r\n      }\r\n      for (const item of fileList) {\r\n        if (item.value == null) {\r\n          item.value = item.url\r\n        }\r\n        item.url = this.buildUrl(item.value, item)\r\n      }\r\n      this.resetFileList(fileList)\r\n    },\r\n    computeFileSize (fileSize) {\r\n      let sizeTip = fileSize\r\n      if (fileSize > (1024 * 1024 * 1024)) {\r\n        sizeTip = (fileSize / (1024 * 1024 * 1024)).toFixed(2) + 'G'\r\n      } else if (fileSize > (1024 * 1024)) {\r\n        sizeTip = (fileSize / (1024 * 1024)).toFixed(2) + 'M'\r\n      } else {\r\n        sizeTip = Math.round(fileSize / (1024)) + 'K'\r\n      }\r\n      return sizeTip\r\n    },\r\n    resetFileList (fileList) {\r\n      this.$set(this, 'fileList', fileList)\r\n    },\r\n    handleUploadProgress (event, file, fileList) {\r\n      if (this._elProps.listType === 'avatar') {\r\n        log.debug('progress', event, file)\r\n        this.avatarLoading = Math.floor(event.percent)\r\n        if (event.percent === 100) {\r\n          this.avatarLoading = undefined\r\n        }\r\n      }\r\n      this.$emit('progress', event, { file, fileList, vm: this })\r\n    },\r\n    handleUploadFileSuccess (res, file, fileList) {\r\n      res.size = res.size != null ? res.size : file.size\r\n      res.name = res.name != null ? res.name : file.name\r\n      res.value = this.getReturnValue(res)\r\n      const value = this.returnType === 'object' ? res.url : res.value\r\n      const url = this.buildUrl(value, res)\r\n      file.url = res.url = url\r\n      this.resetFileList(fileList)\r\n      this.$emit('success', res, file)\r\n      const list = []\r\n      for (const item of fileList) {\r\n        // if (item.status === 'uploading') {\r\n        //   log.debug('当前文件上传完成，等待剩下的文件全部上传成功后再更新value')\r\n        //   return\r\n        // }\r\n        if (item.response != null && item.response.url != null) {\r\n          list.push({ ...item.response })\r\n        } else {\r\n          list.push(item)\r\n        }\r\n      }\r\n      log.debug('handleUploadFileSuccess list', list, res)\r\n      this.emit(res, list)\r\n    },\r\n    isHasUploadingItem () {\r\n      const fileList = this.$refs.fileUploader.uploadFiles\r\n      if (fileList && fileList.length > 0) {\r\n        for (const item of fileList) {\r\n          if (item.status === 'uploading') {\r\n            return true\r\n          }\r\n        }\r\n      }\r\n      return false\r\n    },\r\n    handleUploadFileRemove (file, fileList) {\r\n      this.fileList = fileList\r\n      console.log('remove', fileList)\r\n      this.emitList(fileList)\r\n      this.$emit('remove', file, fileList)\r\n    },\r\n    handleUploadFileError (err, file, fileList) {\r\n      console.error('文件上传失败', err, file, fileList)\r\n      this.$message({ type: 'error', message: '文件上传失败' })\r\n      this.$emit('error', err, file, fileList)\r\n    },\r\n    previewAvatar ($event) {\r\n      $event.stopPropagation()\r\n      this._elProps.onPreview(this.fileList[0])\r\n    },\r\n    removeAvatar ($event) {\r\n      $event.stopPropagation()\r\n      this.resetFileList([])\r\n      this.emit() // 返回undefined，相当于清空已有的值\r\n    },\r\n    emit (res, list) {\r\n      if (this._elProps.limit === 1) {\r\n        const value = res ? res.value : undefined\r\n        this.emitValue = value\r\n        this.$emit('input', value)\r\n      } else {\r\n        this.emitList(list)\r\n      }\r\n    },\r\n    emitList (list) {\r\n      if (list) {\r\n        const tmp = []\r\n        list.forEach(item => {\r\n          tmp.push(this.getReturnValue(item))\r\n        })\r\n        list = tmp\r\n      }\r\n      this.emitValue = list\r\n      this.$emit('input', list)\r\n    },\r\n    getReturnValue (item) {\r\n      const value = item[this.returnType]\r\n      if (value != null) {\r\n        return value\r\n      }\r\n      return item\r\n    },\r\n    httpRequest (option) {\r\n      Promise.all([\r\n        this.doUpload(option),\r\n        this.computeMd5(option.file)\r\n      ]).then((ret) => {\r\n        // 得到组合结果， size，md5\r\n        const result = ret[0]\r\n        result.md5 = ret[1]\r\n        option.onSuccess(result)\r\n      })\r\n    },\r\n    doUpload (option) {\r\n      let config = this.uploader\r\n      if (config == null) {\r\n        config = {}\r\n      }\r\n      if (!lodash.isEmpty(this._elProps.action)) {\r\n        config.action = this._elProps.action\r\n      }\r\n      if (!lodash.isEmpty(this._elProps.name)) {\r\n        config.name = this._elProps.name\r\n      }\r\n      if (!lodash.isEmpty(this._elProps.data)) {\r\n        config.data = this._elProps.data\r\n      }\r\n      if (!lodash.isEmpty(this._elProps.headers)) {\r\n        config.headers = this._elProps.headers\r\n      }\r\n      if (!lodash.isEmpty(this.custom)) {\r\n        config.custom = this.custom\r\n      }\r\n      const uploadOption = {\r\n        file: option.file,\r\n        fileName: option.file.name,\r\n        onProgress: option.onProgress,\r\n        onError: option.onError,\r\n        config: config\r\n      }\r\n      this.$emit('start', uploadOption)\r\n      return this.getUploader().then(uploader => {\r\n        return uploader.upload(uploadOption)\r\n      }).then(ret => {\r\n        if (this.suffix != null) {\r\n          ret.url += this.suffix\r\n        }\r\n        return ret\r\n      })\r\n    },\r\n    onExceed (files, fileList) {\r\n      log.debug('文件数量超出限制')\r\n      if (this._elProps.limit === 1) {\r\n        this.clearFiles()\r\n        this.$refs.fileUploader.handleStart(files[0])\r\n        this.$refs.fileUploader.submit()\r\n        return\r\n      }\r\n      this.$message({\r\n        showClose: true,\r\n        message: '已达最大限制数量，请删除一个文件后再上传',\r\n        type: 'warning'\r\n      })\r\n    },\r\n    clearFiles () {\r\n      if (this.$refs.fileUploader != null) {\r\n        this.$refs.fileUploader.clearFiles()\r\n      }\r\n    },\r\n    getFileList () {\r\n      return this.fileList\r\n    },\r\n    computeMd5 (file) {\r\n      return new Promise((resolve, reject) => {\r\n        const blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice\r\n        const chunkSize = 2097152 // Read in chunks of 2MB\r\n        const chunks = Math.ceil(file.size / chunkSize)\r\n        let currentChunk = 0\r\n        const spark = new SparkMD5.ArrayBuffer()\r\n        const fileReader = new FileReader()\r\n\r\n        fileReader.onload = (e) => {\r\n          spark.append(e.target.result) // Append array buffer\r\n          currentChunk++\r\n\r\n          if (currentChunk < chunks) {\r\n            loadNext()\r\n          } else {\r\n            const md5 = spark.end()\r\n            log.debug('computed hash', md5) // Compute hash\r\n\r\n            resolve(md5)\r\n          }\r\n        }\r\n\r\n        fileReader.onerror = function (error) {\r\n          // eslint-disable-next-line prefer-promise-reject-errors\r\n          reject('md5 computer error', error)\r\n        }\r\n\r\n        function loadNext () {\r\n          const start = currentChunk * chunkSize\r\n          const end = ((start + chunkSize) >= file.size) ? file.size : start + chunkSize\r\n\r\n          fileReader.readAsArrayBuffer(blobSlice.call(file, start, end))\r\n        }\r\n\r\n        loadNext()\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\">\r\n  .d2p-file-uploader{\r\n    &.is-disabled{\r\n      .avatar-item-wrapper{\r\n        background-color: #F5F7FA;\r\n        border-color: #E4E7ED;\r\n        color: #C0C4CC;\r\n        cursor: not-allowed\r\n      }\r\n      li{\r\n        cursor: not-allowed\r\n      }\r\n      .el-upload-list__item-actions{\r\n        cursor: not-allowed\r\n      }\r\n    }\r\n    .hide-plus{\r\n      .el-upload--picture-card{\r\n        display: none;\r\n      }\r\n    }\r\n    .avatar-uploader{\r\n      display: flex;\r\n      .el-upload{\r\n        width: 100px;\r\n        height: 100px;\r\n        /*display: flex;*/\r\n        /*justify-content: center;*/\r\n        /*align-items: center;*/\r\n        background-color: #fbfdff;\r\n        border: 1px dashed #c0ccda;\r\n        border-radius: 6px;\r\n      }\r\n      .el-upload img{\r\n        max-width: 100px;\r\n        max-height: 100px;\r\n      }\r\n      .el-icon-plus.avatar-uploader-icon {\r\n        vertical-align: top;\r\n        font-size: 28px;\r\n        color: #8c939d;\r\n        line-height: 100px;\r\n      }\r\n      .status-uploading{\r\n        border-radius: 6px;\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 100%;\r\n        left: 0;\r\n        top: 0;\r\n        cursor: default;\r\n        text-align: center;\r\n        color: #fff;\r\n        opacity: 1;\r\n        font-size: 20px;\r\n        background-color: rgba(0, 0, 0, 0.5);\r\n        -webkit-transition: opacity .3s;\r\n        transition: opacity .3s;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        .el-progress{\r\n          width: 70px;\r\n          height: 70px;\r\n          .el-progress__text {\r\n            color:#fff;\r\n          }\r\n        }\r\n\r\n      }\r\n    }\r\n    .el-upload--picture-card .el-icon-plus.avatar-uploader-icon {\r\n      vertical-align: top;\r\n      font-size: 28px;\r\n      color: #8c939d;\r\n      line-height: 100px;\r\n    }\r\n    .image-uploader .el-upload-list--picture-card .el-upload-list__item-thumbnail {\r\n      max-width: 100%;\r\n      max-height: 100%;\r\n      width:auto;\r\n      height: auto;\r\n    }\r\n     .el-upload-list--picture .el-upload-list__item-thumbnail {\r\n      max-height: 100%;\r\n      height: auto;\r\n    }\r\n    .image-uploader .el-upload-list--picture-card .el-upload-list__item {\r\n      /*display: flex;*/\r\n      /*justify-content: center;*/\r\n      /*align-items: center;*/\r\n      text-align: center;\r\n      line-height: 125px;\r\n    }\r\n    .image-uploader{\r\n      /*display: flex;flex-wrap: wrap;*/\r\n      .el-upload-list--picture-card .el-upload-list__item-actions{\r\n        line-height: 100px;\r\n      }\r\n      .el-upload-list--picture-card {\r\n        /*display: flex;*/\r\n        /*flex-wrap: wrap;*/\r\n      }\r\n      .el-upload-list__item-status-label{\r\n        line-height: 1;\r\n      }\r\n    }\r\n\r\n    .el-upload--picture-card {\r\n      background-color: #fbfdff;\r\n      border: 1px dashed #c0ccda;\r\n      border-radius: 6px;\r\n      box-sizing: border-box;\r\n      width: 100px;\r\n      height: 100px;\r\n      cursor: pointer;\r\n      /*display: flex;*/\r\n      /*justify-content: center;*/\r\n      /*align-items: center;*/\r\n    }\r\n    .el-upload-list--picture-card {\r\n      .el-upload-list__item{\r\n        width: 100px;\r\n        height: 100px;\r\n      }\r\n      .el-progress-circle{\r\n        width: 70px !important;\r\n        height: 70px !important;\r\n      }\r\n      .el-progress{\r\n        width: 70px !important;\r\n        height: 70px !important;\r\n      }\r\n    }\r\n    .avatar-item-wrapper{\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      width: 100%;\r\n      height: 100%;\r\n      position: relative;\r\n      .avatar{\r\n        display: contents;\r\n      }\r\n    }\r\n\r\n    .preview{\r\n      border-radius: 6px;\r\n      position: absolute;\r\n      width: 100%;\r\n      height: 100%;\r\n      left: 0;\r\n      top: 0;\r\n      cursor: default;\r\n      text-align: center;\r\n      color: #fff;\r\n      opacity: 0;\r\n      font-size: 20px;\r\n      background-color: rgba(0,0,0,.9);\r\n      -webkit-transition: opacity .3s;\r\n      transition: opacity .3s;\r\n      &:hover{\r\n        opacity: 0.9;\r\n      }\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      i{\r\n        margin: 0 7px;\r\n        cursor: pointer;\r\n      }\r\n    }\r\n  }\r\n\r\n</style>\r\n"]}]}