{"remainingRequest":"/Users/raviailani/Downloads/django-vue-admin/web/node_modules/babel-loader/lib/index.js!/Users/raviailani/Downloads/django-vue-admin/web/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/raviailani/Downloads/django-vue-admin/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/raviailani/Downloads/django-vue-admin/web/src/components/tree-selector/lib/tree-selector.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/raviailani/Downloads/django-vue-admin/web/src/components/tree-selector/lib/tree-selector.vue","mtime":1674694301482},{"path":"/Users/raviailani/Downloads/django-vue-admin/web/babel.config.js","mtime":1674694301461},{"path":"/Users/raviailani/Downloads/django-vue-admin/web/node_modules/cache-loader/dist/cjs.js","mtime":1674694548948},{"path":"/Users/raviailani/Downloads/django-vue-admin/web/node_modules/babel-loader/lib/index.js","mtime":1674694549283},{"path":"/Users/raviailani/Downloads/django-vue-admin/web/node_modules/cache-loader/dist/cjs.js","mtime":1674694548948},{"path":"/Users/raviailani/Downloads/django-vue-admin/web/node_modules/vue-loader/lib/index.js","mtime":1674694549360}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":";;;;;;;;;;AA8DA;AACA;AACA;AACA;AACA;EACAA;EACAC;EACAC;IACA;IACAC;MACAC;IACA;IACA;IACAC;MACAD;MACAE;IACA;IACA;IACAC;MACAH;MACAI;MACAC;IACA;IACA;IACAC;MACAN;MACAK;IACA;IACAE;MACAP;MACAK;IACA;IACAG;MACAR;MACAK;IACA;IACAI;MACAT;MACAK;IACA;IACA;IACAK;MACAV;MACAE;MACAG;IACA;IACA;IACAM;MACAX;MACAK;IACA;IACA;IACAO;MAAAZ;MAAAK;IAAA;IACA;IACAQ;MAAAb;MAAAK;IAAA;IACA;IACAS;MAAAd;MAAAK;IAAA;IACA;IACAU;MACAf;IACA;IACA;AACA;AACA;IACAgB;MACAhB;MACAK;IACA;IACA;IACAY;MACAjB;MACAE;IACA;EACA;EACAgB;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;IACA;IACA;IACA;EAAA,CACA;EACAC;IACAC;MACA;QACAC;QACAC;QACA9B;MACA;MACA;QACA;UAAA+B;QAAA;QACA;UAAAA;QAAA;QACA;UAAAA;QAAA;MACA;MACAA;MACAC;MACA;IACA;IACAC;MACA,yDACA,SACA;IACA;EACA;EACAC;IACAT;MACA;IACA;EACA;EACAU;IACA;IACA;IACA;IACA;IACA;IACA;IACAC;MACAC;MACA;IACA;IACAC;MAAA;MACAD;MACA;QACA;MACA;MACA;MACA;QACA;MACA;MAEA;QACAE;MACA;MACA;QACAF;QACA;UACA;QACA;MACA;QACA;QACA;UACA;QACA;QAAA,2CACAE;UAAA;QAAA;UAAA;YAAA;YACA;YACA;YACA;cACAC;YACA;UACA;QAAA;UAAA;QAAA;UAAA;QAAA;QACA;MACA;IACA;IACAC;MACA;MAAA,4CACAD;QAAA;MAAA;QAAA;UAAA;UACAE;UACAnB;QACA;MAAA;QAAA;MAAA;QAAA;MAAA;MACAc;MACA;MACA;IACA;IACAM;MACA;IACA;IACAC;MACA;IACA;IACAC;MAAA;MACA;QACA;MACA;MACA;MACAC;QACA;UACA;YAAA;UAAA;UACAC;YACA;YACA;cACA;YACA;UACA;UACA;YACA;cACA;YACA;cACA;YACA;UACA;QACA;MACA;IACA;IACAC;MACA;QACA;MACA;MACAN;IACA;IACAO;MACA;QACA;MACA;QACA;MACA;IACA;IACAC;MACA;QACA;MACA;QACA;MACA;IACA;IACAC;MACA;MACA;QACAC;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;QACAC;MACA;MACA;MACA;QACA;MACA;MACA;IACA;IACAC;MACA;MACAC;MACA;MACA;IACA;IACAC;MACA;MACA;QACAlB;MACA;QACA;QACA;UACAA;QACA;UACAA;QACA;MACA;MACA;QACAA;MACA;MACA;QACAA;MACA;MACAH;MACA;MACA;IACA;IACAsB;MAAA;MACA;MACA;QACA;QACA;QACA;UAAA;QAAA;QACA;QACA;QACA,4CACAC,mBACAC,SACAC,wEACAF,UACA;QACAG;QACA;UACA;QACA;MACA;IACA;IACAC;MACA;MAAA,4CACAxB;QAAA;MAAA;QAAA;UAAA;UACA;UACA;YAAA,4CACAY;cAAA;YAAA;cAAA;gBAAA;gBACAa;cACA;YAAA;cAAA;YAAA;cAAA;YAAA;UACA;QACA;MAAA;QAAA;MAAA;QAAA;MAAA;MACA;MAAA,4CACAzB;QAAA;MAAA;QAAA;UAAA;UACA;UACA;YACAe;UACA;QACA;MAAA;QAAA;MAAA;QAAA;MAAA;MACA;IACA;IACAW;MACA;MAAA,4CACA1B;QAAA;MAAA;QAAA;UAAA;UACAe;QACA;MAAA;QAAA;MAAA;QAAA;MAAA;MACA;IACA;IACAY;MACA;MACA;IACA;IACAC;MACA;MAEA;QACA;MACA;IACA;EACA;AACA","names":["name","mixins","props","value","type","filter","require","placeholder","required","default","filterPlaceholder","dialogTitle","cancelText","confirmText","treeFilter","multiple","ignoreFullCheckedChildren","leafOnly","includeHalfChecked","elProps","clearable","dict","data","currentValue","collapseTags","selected","dialogVisible","filterText","created","computed","_elProps","showCheckbox","highlightCurrent","defaultElProps","lodash","collapseTagSize","watch","methods","onDictLoaded","log","setValue","arrValue","nodes","selectedNodes","node","handleCheckChange","handleCurrentChange","openDialog","setTimeout","ids","doExpandParent","getValueKey","getValueLabel","getValueChildren","children","selectSubmit","doValueInputChanged","values","itemClosed","console","refreshSelected","resetInputHeight","sizeInMap","Math","tags","input","filterFullCheckedChildren","ignored","formatValue","filterNode","onChange"],"sourceRoot":"src/components/tree-selector/lib","sources":["tree-selector.vue"],"sourcesContent":["<template>\n  <div class=\"d2p-tree-selector\">\n    <div  class=\"el-cascader el-cascader--default\" :class=\"{'is-disabled':disabled}\" @click=\"openDialog\">\n      <div class=\"el-input el-input--default el-input--suffix\" :class=\"{'is-disabled':disabled}\" >\n        <el-input ref=\"reference\" :disabled=\"disabled\" :placeholder=\"value ? '' : placeholder\"/>\n        <span class=\"el-input__suffix\">\n          <span class=\"el-input__suffix-inner\">\n            <i class=\"el-input__icon el-icon-arrow-down\" @click=\"openDialog\"/>\n          </span>\n        </span>\n      </div>\n      <div class=\"el-cascader__tags\" ref=\"tags\">\n        <transition-group @after-leave=\"resetInputHeight\" >\n          <el-tag\n            v-for=\"item in selected\"\n            :key=\"getValueKey(item)\"\n            :closable=\"clearable\"\n            :size=\"collapseTagSize\"\n            :hit=\"false\"\n            type=\"info\"\n            @close=\"itemClosed(item)\"\n            disable-transitions>\n            <span class=\"el-select__tags-text\">{{ getValueLabel(item) }}</span>\n          </el-tag>\n        </transition-group>\n      </div>\n    </div>\n    <el-dialog custom-class=\"d2p-tree-selector-dialog\"\n      :title=\"dialogTitle\"\n      :visible.sync=\"dialogVisible\"\n      width=\"30%\" append-to-body>\n      <div class=\"tree-wrapper\">\n        <div v-if=\"treeFilter\" class=\"filter-bar\" style=\"padding-bottom: 20px\">\n          <el-input\n            prefix-icon=\"el-icon-search\"\n            :placeholder=\"filterPlaceholder\"\n            v-model=\"filterText\" size=\"small\" >\n          </el-input>\n        </div>\n\n        <div class=\"tree-body\">\n          <el-tree\n            :data=\"_options\"\n            @check-change=\"handleCheckChange\"\n            @current-change=\"handleCurrentChange\"\n            :filterNodeMethod=\"filterNode\"\n            v-bind=\"_elProps\"\n            ref=\"elTree\">\n          </el-tree>\n        </div>\n\n      </div>\n\n      <span slot=\"footer\" class=\"dialog-footer\">\n          <el-button @click=\"dialogVisible = false\">{{cancelText}}</el-button>\n          <el-button type=\"primary\" @click=\"selectSubmit\">{{confirmText}}</el-button>\n        </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport lodash from 'lodash'\nimport { d2CrudPlus } from 'd2-crud-plus'\nimport log from 'd2p-extends/src/utils/util.log'\n// 树形选择组件，需要import {D2pTreeSelector} from 'd2p-extends'\nexport default {\n  name: 'd2p-tree-selector',\n  mixins: [d2CrudPlus.input, d2CrudPlus.inputDict],\n  props: {\n    // 值\n    value: {\n      type: [Number, String, Boolean, Array, Object]\n    },\n    // 过滤，value中的nodes过滤方法 参数为nodes\n    filter: {\n      type: Function,\n      require: false\n    },\n    // 占位符\n    placeholder: {\n      type: String,\n      required: false,\n      default: '请选择'\n    },\n    // 过滤的placeholder\n    filterPlaceholder: {\n      type: String,\n      default: '输入关键字进行过滤'\n    },\n    dialogTitle: {\n      type: String,\n      default: '选择'\n    },\n    cancelText: {\n      type: String,\n      default: '取消'\n    },\n    confirmText: {\n      type: String,\n      default: '确定'\n    },\n    // 树形组件节点过滤，可以配置elProps.filterNodeMethod ，覆盖默认的过滤方法\n    treeFilter: {\n      type: Boolean,\n      require: false,\n      default: true\n    },\n    // 是否多选，传入false为单选\n    multiple: {\n      type: Boolean,\n      default: true\n    },\n    // 是否忽略选中节点的子节点\n    ignoreFullCheckedChildren: { type: Boolean, default: true },\n    // 是否只返回叶子节点\n    leafOnly: { type: Boolean, default: false },\n    // 是否包含半选节点\n    includeHalfChecked: { type: Boolean, default: false },\n    // el-tree的属性配置\n    elProps: {\n      type: Object\n    },\n    /**\n     * 是否可以清除\n     */\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    // 数据字典配置\n    dict: {\n      type: Object,\n      require: false\n    }\n  },\n  data () {\n    return {\n      currentValue: undefined,\n      collapseTags: false,\n      selected: [],\n      dialogVisible: false,\n      filterText: undefined\n    }\n  },\n  created () {\n    // if (this.dict) {\n    //   this.dict = d2CrudPlus.util.dict.mergeDefault(this.dict, true)\n    // }\n    // this.initData()\n  },\n  computed: {\n    _elProps () {\n      const defaultElProps = {\n        showCheckbox: this.multiple,\n        highlightCurrent: !this.multiple,\n        props: {}\n      }\n      if (this.dict != null) {\n        if (this.dict.label != null) { defaultElProps.props.label = this.dict.label }\n        if (this.dict.value != null) { defaultElProps.props.value = this.dict.value }\n        if (this.dict.children != null) { defaultElProps.props.children = this.dict.children }\n      }\n      defaultElProps.nodeKey = defaultElProps.props.value\n      lodash.merge(defaultElProps, this.elProps)\n      return defaultElProps\n    },\n    collapseTagSize () {\n      return ['small', 'mini'].indexOf(this.selectSize) > -1\n        ? 'mini'\n        : 'small'\n    }\n  },\n  watch: {\n    filterText (val) {\n      this.$refs.elTree.filter(val)\n    }\n  },\n  methods: {\n    // initData () {\n    //   d2CrudPlus.util.dict.get(this.dict).then(ret => {\n    //     this.$set(this, 'data', ret)\n    //     this.setValue(this.value)\n    //   })\n    // },\n    onDictLoaded () {\n      log.debug('onDictLoaded', this.dict, this.value)\n      this.setValue(this.value)\n    },\n    setValue (value) {\n      log.debug('setValue:', this.currentValue, this.value, this._options)\n      if (this.currentValue === this.value) {\n        return\n      }\n      let arrValue = value\n      if (value == null) {\n        this.selected = []\n      }\n\n      if (!(arrValue instanceof Array)) {\n        arrValue = [arrValue]\n      }\n      if (this.dict && this.dict.getNodes) {\n        log.debug('getNodes:', arrValue)\n        this.dict.getNodes(arrValue).then(nodes => {\n          this.selectedNodes(nodes, value)\n        })\n      } else {\n        const nodes = []\n        if (this._options == null || this._options.length === 0) {\n          return\n        }\n        for (const item of arrValue) {\n          const data = this._options\n          const node = d2CrudPlus.util.dict.getByValue(item, data, this.dict)\n          if (node != null) {\n            nodes.push(node)\n          }\n        }\n        this.selectedNodes(nodes, value)\n      }\n    },\n    selectedNodes (nodes, value) {\n      const selected = []\n      for (const node of nodes) {\n        node.id = node[this.dict.value]\n        selected.push(node)\n      }\n      log.debug('selected:', selected)\n      this.$set(this, 'selected', selected)\n      this.resetInputHeight()\n    },\n    handleCheckChange (event) {\n      this.$emit('check-change', event)\n    },\n    handleCurrentChange (event) {\n      this.$emit('current-change', event)\n    },\n    openDialog () {\n      if (this.disabled) {\n        return\n      }\n      this.dialogVisible = true\n      setTimeout(() => {\n        if (this.selected != null) {\n          const ids = this.selected.map(item => item[this._elProps.props.value])\n          ids.forEach(id => {\n            const current = this.$refs.elTree.store.nodesMap[id]\n            if (current != null) {\n              this.doExpandParent(current)\n            }\n          })\n          this.$nextTick(() => {\n            if (this.multiple) {\n              this.$refs.elTree.setCheckedKeys(ids, this.leafOnly)\n            } else if (ids.length > 0) {\n              this.$refs.elTree.setCurrentKey(ids[0])\n            }\n          })\n        }\n      }, 1)\n    },\n    doExpandParent (node) {\n      if (node.parent != null) {\n        this.doExpandParent(node.parent)\n      }\n      node.expanded = true\n    },\n    getValueKey (item) {\n      if (this._elProps.props.value != null) {\n        return item[this._elProps.props.value]\n      } else {\n        return item.value\n      }\n    },\n    getValueLabel (item) {\n      if (this._elProps.props.label != null) {\n        return item[this._elProps.props.label]\n      } else {\n        return item.label\n      }\n    },\n    getValueChildren (item) {\n      let children = 'children'\n      if (this._elProps.props.children != null) {\n        children = this._elProps.props.children\n      }\n      return item[children]\n    },\n    selectSubmit () {\n      const nodes = this.refreshSelected()\n      this.dialogVisible = false\n      this.doValueInputChanged(nodes)\n    },\n    doValueInputChanged (nodes) {\n      let values = this.formatValue(nodes)\n      this.resetInputHeight()\n      if (!this.multiple) {\n        values = values && values.length > 0 ? values[0] : undefined\n      }\n      this.currentValue = values\n      if (this.dispatch) {\n        this.dispatch('ElFormItem', 'el.form.blur')\n      }\n      this.$emit('input', values)\n    },\n    itemClosed (item) {\n      const newNodes = lodash.without(this.selected, item)\n      console.log('new value', item, newNodes)\n      this.$set(this, 'selected', newNodes)\n      this.doValueInputChanged(newNodes)\n    },\n    refreshSelected () {\n      let nodes = null\n      if (this.multiple) {\n        nodes = this.$refs.elTree.getCheckedNodes(this.leafOnly, this.includeHalfChecked)\n      } else {\n        const node = this.$refs.elTree.getCurrentNode()\n        if (node == null) {\n          nodes = []\n        } else {\n          nodes = [node]\n        }\n      }\n      if (this.ignoreFullCheckedChildren) {\n        nodes = this.filterFullCheckedChildren(nodes)\n      }\n      if (this.filter != null) {\n        nodes = this.filter(nodes)\n      }\n      log.debug('selected', this.selected)\n      this.$set(this, 'selected', nodes)\n      return nodes\n    },\n    resetInputHeight () {\n      if (this.collapseTags && !this.filterable) return\n      this.$nextTick(() => {\n        if (!this.$refs.reference) return\n        const inputChildNodes = this.$refs.reference.$el.childNodes\n        const input = [].filter.call(inputChildNodes, item => item.tagName === 'INPUT')[0]\n        const tags = this.$refs.tags\n        const sizeInMap = this.initialInputHeight || 40\n        const height = this.selected.length === 0\n          ? sizeInMap + 'px'\n          : Math.max(\n            tags ? (tags.clientHeight + (tags.clientHeight > sizeInMap ? 6 : 0)) : 0,\n            sizeInMap\n          ) + 'px'\n        input.style.height = height\n        if (this.visible && this.emptyText !== false) {\n          this.broadcast('ElSelectDropdown', 'updatePopper')\n        }\n      })\n    },\n    filterFullCheckedChildren (nodes) {\n      const ignored = new Set()\n      for (const item of nodes) {\n        const children = this.getValueChildren(item)\n        if (children != null) {\n          for (const child of children) {\n            ignored.add(this.getValueKey(child))\n          }\n        }\n      }\n      const values = []\n      for (const item of nodes) {\n        const key = this.getValueKey(item)\n        if (!ignored.has(key)) {\n          values.push(item)\n        }\n      }\n      return values\n    },\n    formatValue (nodes) {\n      const values = []\n      for (const item of nodes) {\n        values.push(this.getValueKey(item))\n      }\n      return values\n    },\n    filterNode (value, data) {\n      if (!value) return true\n      return this.getValueLabel(data).indexOf(value) !== -1\n    },\n    onChange (value) {\n      this.$emit('change', value)\n\n      if (this.dispatch) {\n        this.dispatch('ElFormItem', 'el.form.blur')\n      }\n    }\n  }\n}\n</script>\n<style lang=\"scss\">\n.d2p-tree-selector{\n  width: 100%;\n  .el-cascader{\n    width: 100%;\n  }\n  .is-disabled .el-tag__close.el-icon-close {\n    display: none;\n  }\n}\n.d2p-tree-selector-dialog{\n  &.el-dialog{\n    max-height:70vh;\n    display: flex;\n    flex-direction: column;\n    .el-dialog__body{\n      flex:1;\n      overflow-y: auto;\n    }\n    .el-dialog__header{\n      padding: 20px 20px 20px;\n      border-bottom: 1px solid #eee;\n    }\n    .el-dialog__footer {\n      padding: 10px 20px 10px;\n      border-top: 1px solid #eee;\n    }\n  }\n}\n</style>\n"]}]}